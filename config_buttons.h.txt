// ********************************************************************************************

//Config File for Throttle P040224



// Encoder Direction and Actions

// Define the rotation diection for the rotary encoder to increase speed.
//   false = Counter clockwise
//   true = clockwise
// The default value is false (counter clockwise)

 #define ENCODER_ROTATION_CLOCKWISE_IS_INCREASE_SPEED                     true

// Define what the rotary encoder button does.   (Pushing down on the knob)
// By default it will stop the loco if moving, then a second push will change the direction.
// Uncomment and change the action if you wish it to do something else.
// See static.h or README.md for details on the allowed functions.
// #define ENCODER_BUTTON_ACTION SPEED_STOP_THEN_TOGGLE_DIRECTION 

// Define what the rotary encoder button does when the loco is stationary.   (Pushing down on the knob)
//   true = if the locos(s) are stationary, clicking the encoder button will toggle the direction
//   false = does nothing
// this only takes effect if the ENCODER_BUTTON_ACTION (above) is set to SPEED_STOP_THEN_TOGGLE_DIRECTION
// The default value is true

 //#define TOGGLE_DIRECTION_ON_ENCODER_BUTTON_PRESSED_WHEN_STATIONAY         true

// Rotary Encoder Debounce Time
// increase if you find the encoder buttons bounce (activate twice) or you get speed changes when you press the encoder button
// #define ROTARY_ENCODER_DEBOUNCE_TIME     200
//*******************************************************************************************************************
// Keypad Definitions / Actions

// Define what each button will do as direct press (not in a menu)   * and # cannot be remapped
// See actions.h or README.md for details on the allowed functions

 #define CHOSEN_KEYPAD_0_FUNCTION     FUNCTION_0
 #define CHOSEN_KEYPAD_1_FUNCTION     SPEED_UP
 #define CHOSEN_KEYPAD_2_FUNCTION     SPEED_DOWN
 #define CHOSEN_KEYPAD_3_FUNCTION     SPEED_UP_FAST
 #define CHOSEN_KEYPAD_4_FUNCTION     SPEED_DOWN_FAST
 #define CHOSEN_KEYPAD_5_FUNCTION     DIRECTION_FORWARD
 #define CHOSEN_KEYPAD_6_FUNCTION     DIRECTION_REVERSE
 #define CHOSEN_KEYPAD_7_FUNCTION     NEXT_THROTTLE
 #define CHOSEN_KEYPAD_8_FUNCTION     FUNCTION_8
 #define CHOSEN_KEYPAD_9_FUNCTION     FUNCTION_9


// text that will appear when you press #
// if you rearrange the items above, modify this text to suit    * and # cannot be remapped here

 #define CHOSEN_KEYPAD_0_DISPLAY_NAME     "0 Lights"
 #define CHOSEN_KEYPAD_1_DISPLAY_NAME     "SPD+"
 #define CHOSEN_KEYPAD_2_DISPLAY_NAME     "SPD-"
 #define CHOSEN_KEYPAD_3_DISPLAY_NAME     "SPD+ FAST"
 #define CHOSEN_KEYPAD_4_DISPLAY_NAME     "SPD- FAST"
 #define CHOSEN_KEYPAD_5_DISPLAY_NAME     "FWD"
 #define CHOSEN_KEYPAD_6_DISPLAY_NAME     "REV"
 #define CHOSEN_KEYPAD_7_DISPLAY_NAME     "NXT TH"
 #define CHOSEN_KEYPAD_8_DISPLAY_NAME     "Mute"
 #define CHOSEN_KEYPAD_9_DISPLAY_NAME     "F9"

// '#" button action
// By default, # will show the list above. 
//   true = will take you to the Loco Function Labels screen directly
//   false = will take you to the Key Definitions
// The Defualt is false

// #define HASH_SHOWS_FUNCTIONS_INSTEAD_OF_KEY_DEFS         false

// *******************************************************************************************************************
// Maximum number of thtottles

// Define the number of throttles that you want.
// To use multiple throttles, one of the keys or buttons will need to be defined as 
// NEXT_THROTTLE.  (keypad 5 is by default)
// Maximum supported by the WiTcontroller is 

// uncomment and increase the number if you always need more that two throttles
 #define MAX_THROTTLES                 2 

// *******************************************************************************************************************
// speed increase for each click of the encoder 

// The default is 4
#define SPEED_STEP                       2

// The default is 3
 #define SPEED_STEP_MULTIPLIER            4          // for 'fast' speed steps

// Additional multiplier.  If the multiplier is enabled from the menu, each rotation of the encoder becomes the speedStep * the AdditionalMultiplier

// The default is 2
// #define SPEED_STEP_ADDITIONAL_MULTIPLIER 2

// by default, the speed will be displayed as the the DCC speed (0-126)
// IMPORTANT: only one should be enabled.  If DISPLAY_SPEED_AS_PERCENT is enabled it will take presidence over DISPLAY_SPEED_AS_0_TO_28
// Note: there will be rounding errors!

// uncomment this line to display the speeds a percentage.
// #define DISPLAY_SPEED_AS_PERCENT         true
// uncomment this line to display the speeds as 0-28.
// #define DISPLAY_SPEED_AS_0_TO_28         true

// *******************************************************************************************************************
// DCC functions in consists
//
// If specified, must be either   CONSIST_ALL_LOCOS  or  CONSIST_LEAD_LOCO
// Default for functions above F2 is CONSIST_LEAD_LOCO

// #define CONSIST_FUNCTION_FOLLOW_F0                  CONSIST_ALL_LOCOS            // lights
// #define CONSIST_FUNCTION_FOLLOW_F1                  CONSIST_LEAD_LOCO            // bell
// #define CONSIST_FUNCTION_FOLLOW_F2                  CONSIST_LEAD_LOCO            // horn

// Defines can optionally be created for CONSIST_FUNCTION_FOLLOW_F3 to CONSIST_FUNCTION_FOLLOW_F31 
// as well.
// If they are not individually specified the CONSIST_FUNCTION_FOLLOW_OTHER_FUNCTIONS option 
// will be used for them.

// *******************************************************************************************************************

// oLED definition

// This is one of the common 1.3 inch OLED displays
 #define OLED_TYPE U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE, /* clock=*/ 22, /* data=*/ 21);

// *******************************************************************************************************************
// Debugging

// WiTcontroller console debug messages are ENABLED by default
// to disable to console messages, uncomment and set the following to  1    (i.e. 0 = on  1 = off)
// #define WITCONTROLLER_DEBUG    0

// WiThrottle Protocol console debug messages are DISABLED by default
// to enable to console messages, uncomment and set the following to  0    (i.e. 0 = on  1 = off)
// #define WITHROTTLE_PROTOCOL_DEBUG    1

// console debug messages are enabled with the defines above
// the default level is 1
// 0 = errors only 1 = default level 2 = verbose 3 = extreme
// #define DEBUG_LEVEL    1

// *******************************************************************************************************************
// Default function labels

// uncomment any of these lines if you wish to change the labels
//#define F0_LABEL "Light"
//#define F1_LABEL "Bell"
//#define F2_LABEL "Horn"

// *******************************************************************************************************************
// Encoder Hardware
// 

// Small ESP32
 #define ROTARY_ENCODER_A_PIN 14
 #define ROTARY_ENCODER_B_PIN 13
 #define ROTARY_ENCODER_BUTTON_PIN 12

// #define ROTARY_ENCODER_VCC_PIN -1 /* 27 put -1 of Rotary encoder Vcc is connected directly to 3,3V; else you can use declared output pin for powering rotary encoder */
// #define ROTARY_ENCODER_STEPS 2 //depending on your encoder - try 1,2 or 4 to get expected behaviour

// *******************************************************************************************************************
// Keypad Hardware
//
// Uncomment and change as needed
// Defaults are for the Small 4x3 keypad

// 4x3 keypad - default
 #define ROW_NUM     4
 #define COLUMN_NUM  3
 #define KEYPAD_KEYS  {'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'}, {'*', '0', '#'}
 #define KEYPAD_ROW_PINS    {19, 18, 5, 17}
 #define KEYPAD_COLUMN_PINS { 2, 4, 16}


// Keypad configuration
// Play with these values if you see the keys bounce (activate twice on a single press)
// Times are in miliseconds

 #define KEYPAD_DEBOUNCE_TIME 75
 #define KEYPAD_HOLD_TIME 200

// *******************************************************************************************************************

// New Additional / optional buttons
//
// This new format allows for up to 11 additional buttons
//
// To use the new format USE_NEW_ADDITIONAL_BUTTONS_FORMAT must be set to 'true'
// And NEW_MAX_ADDITIONAL_BUTTONS must be set to the number you want to use. 
// Then the following list MUST have the same number of elements
// Make sure the last entry in each list does NOT have the comma (,)

   #define USE_NEW_ADDITIONAL_BUTTONS_FORMAT true

// Only relevant for the buttons that are set to FUNCTION_00 to FUNCTION_32
// Either 'true' = LATCHING or 'false' = NOT LATCHING
   #define ADDITIONAL_BUTTON_OVERRIDE_DEFAULT_LATCHING true

// must be 1 or greater
    #define NEW_MAX_ADDITIONAL_BUTTONS 8

    #define NEW_ADDITIONAL_BUTTON_ACTIONS {DIRECTION_TOGGLE,FUNCTION_4,FUNCTION_3,E_STOP_CURRENT_LOCO,FUNCTION_0,NEXT_THROTTLE,FUNCTION_2,FUNCTION_1,}

    #define NEW_ADDITIONAL_BUTTON_LATCHING {true,false,true,true,true,true,false,true,}

// Set the pin value to -1 to skip that value.
// For pins on the ESP32 use the number shown on the board/diagram
// If you are using pins on a I2C GPIO Expansion board, they will be numbered: 0-15
//
    #define NEW_ADDITIONAL_BUTTON_PIN {15,23,26,27,32,33,34,35}

// Set to either INPUT_PULLUP or INPUT.  If INPUT, the pin will need an external pullup resister (e.g. 10k)
// Pins 34,35,36,39 can be used but don't have an internal pullup, so use INPUT for these
//
    #define NEW_ADDITIONAL_BUTTON_TYPE {INPUT_PULLUP,INPUT_PULLUP,INPUT_PULLUP,INPUT_PULLUP,INPUT_PULLUP,INPUT_PULLUP,INPUT,INPUT}

// *******************************************************************************************************************

// Heartbeat 

// If no response is received from the server in the specified period (milliseconds), shut down.
// default is 4 minutes = 240000

// #define MAX_HEARTBEAT_PERIOD 240000

// enable heartbeat by default.  Can be turned on or off in the menus
// #define HEARTBEAT_ENABLED true 

// *******************************************************************************************************************
// Roster Sorting

//   0 = no sorting.  As it comes from the server
//   1 = sort by name (first 10 chars only)
//   2 = sort by DCC Address
// The default is 'sort by name'

 #define ROSTER_SORT_SEQUENCE 2
// *******************************************************************************************************************
// Release Loco from Consist Options

// By default, to release a single loco from a consist/mu, you must enter the address of the loco
// Uncomment this line if you wish to release locos by just entering the index number (1-8) of 
// the loco in the consist
 #define DROP_LOCO_BY_INDEX true
// *******************************************************************************************************************
// Translations

// Uncomment the appropriate line to change the language displayed.
// If you wish to override any of the translations you can do so individually here,
// but, the define(s) must done before the #include of the base langauge file
//
//
// German - Deutsche
// #include "language_deutsch.h"

// *******************************************************************************************************************
// Startup Commands

// The following commands will be executed, in order, after connection to the WiThrottle Server.
// Each must be ONLY ONE single valid command.  Either a direct action or a menu action.
//
// Note: Selecting from the roster/turnouts etc. is not possible as the commands 
// will execute before the roster loads.

// e.g. this command will automatically acquire loco with a DCC Address of 222  
// then set the speed multplier to *3
// #define STARTUP_COMMAND_1 "*1222#"
// #define STARTUP_COMMAND_2 "6"
// #define STARTUP_COMMAND_3 ""
// #define STARTUP_COMMAND_4 ""

// Enabling this option will automatically acquire the only roster entry after connection to the 
// WiThrottle Server, but only if there is only one roster entry 
// #define ACQUIRE_ROSTER_ENTRY_IF_ONLY_ONE true

// *******************************************************************************************************************
// Display Loco name

// Uncomment if you want to display the loco name instead of DCC address
// #define DISPLAY_LOCO_NAME

// if you want to change the space between two loco names/ dcc addresses
// #define CONSIST_SPACE_BETWEEN_LOCOS " "

// ***************************************************
// loco Acquire
//
// if you never want on-the-fly consists/MUs then uncomment this line
// This can be altered on the fly in the Extras menu

// #define DROP_BEFORE_ACQUIRE true

// ***************************************************
// Restore previously acquired locos on connection
//
// If this option is enabled, and you have deliberately saved the current 
// locos ( # -> 9 -> 9), then the next time you connect the device it 
// will try to load the previously acquired locos.
//
// enabled by default

// #define RESTORE_ACQUIRED_LOCOS false

// *******************************************************************************************************************

// Custom App Name
//
// uncomment and change if required
//
 #define CUSTOM_APPNAME "SPKPRR"
